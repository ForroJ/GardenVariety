// <auto-generated />
using System;
using GardenVariety.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GardenVariety.Migrations
{
    [DbContext(typeof(GardenVarietyContext))]
    [Migration("20250428034051_changedGarden")]
    partial class changedGarden
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GardenVariety.Models.Garden", b =>
                {
                    b.Property<int>("GardenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GardenId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PlantingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("GardenId");

                    b.ToTable("Gardens");

                    b.HasData(
                        new
                        {
                            GardenId = 1,
                            Name = "Apple",
                            Notes = "Fresh and juicy apples.",
                            PlantingDate = new DateTime(2025, 2, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 10,
                            Type = 0
                        },
                        new
                        {
                            GardenId = 2,
                            Name = "Carrot",
                            Notes = "Crunchy and sweet carrots.",
                            PlantingDate = new DateTime(2025, 1, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 30,
                            Type = 1
                        });
                });

            modelBuilder.Entity("GardenVariety.Models.Harvester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GardenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GardenId");

                    b.ToTable("Harvests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 8, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GardenId = 1
                        });
                });

            modelBuilder.Entity("GardenVariety.Models.Harvester", b =>
                {
                    b.HasOne("GardenVariety.Models.Garden", "Garden")
                        .WithMany()
                        .HasForeignKey("GardenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garden");
                });
#pragma warning restore 612, 618
        }
    }
}
